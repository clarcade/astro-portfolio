---
import type {ImageMetadata} from 'astro';
import {Image} from 'astro:assets';
import {getMonthShortNameFromDate} from '../utils/dateUtil';
import Button from './Button.astro';
import Icon from './Icon.astro';

export interface EducationHistoryData {
	id: string;
	institution: string;
	fromDate?: number;
	toDate?: 'Current' | number;
	imgMetadata?: {
		src: ImageMetadata;
		width: number;
		height: number;
		format: string;
		alt: string;
	};
	type: 'Degree' | 'Nanodegree' | 'Certificate';
	value: string;
	link?: string;
}

interface Props {
	data: EducationHistoryData;
}

const {
	data: {
		id,
		institution,
		fromDate,
		toDate,
		imgMetadata,
		type,
		value,
		link,
	},
} = Astro.props;

// ids
const idBase = 'employer-history';
const collapseButtonId = `${idBase}-collapse-button-${id}`;
const downChevronContainerId = `${idBase}-down-chevron-container-${id}`;
const contentContainerId = `${idBase}-content-container-${id}`;
const linkId = `${idBase}-link-${id}`;

// fromDate
let educationFromDate = '';
if (fromDate) {
	const fromDateObject = new Date(fromDate);
	const fromDateMonth = getMonthShortNameFromDate(
		fromDateObject,
	);
	const fromDateYear = fromDateObject.getFullYear();
	educationFromDate = `${fromDateMonth} ${fromDateYear}`;
}

// toDate
let educationToDate = '';
if (toDate) {
	const toDateObject = new Date(toDate);
	educationToDate = toDate === 'Current'
		? toDate
		: `${getMonthShortNameFromDate(toDateObject)} ${toDateObject.getFullYear()}`;
}

// timeframe
let timeframe = '';
if (educationToDate) {
	timeframe = educationFromDate
		? `${educationFromDate} - ${educationToDate}`
		: educationToDate;
}
---

<education-history
	data-collapsebuttonid={collapseButtonId}
	data-downchevroncontainerid={downChevronContainerId}
	data-contentcontainerid={contentContainerId}
	data-linkid={linkId}
>
	<div class='education-history'>
		<div class='education-history__title-section'>
			<Button
				id={collapseButtonId}
				type='quiet'
				class='education-history__title-button'
			>
				<div class='education-history__title-container'>
					<h3 class='education-history__company-name'>{institution}</h3>

					<div
						class='education-history__down-chevron-container'
						id={downChevronContainerId}
					>
						<Icon icon='down-chevron' />
					</div>
				</div>
			</Button>
		</div>

		<div
			class='education-history__content-summary'
			id={contentContainerId}
		>
			{timeframe && (
				<div class='education-history__timeframe'>
					<div class='education-history__timeframe__contents'>
						{timeframe}
					</div>
				</div>
			)}

			<div class='education-history__degree'>
				{imgMetadata && (
					<div class='education-history__degree__img-area'>
						<div class='education-history__img-container'>
							<Image
								src={imgMetadata.src}
								width={imgMetadata.width}
								height={imgMetadata.height}
								format='webp'
								alt='Cory Larcade'
							/>
						</div>
					</div>
				)}

				<div class='education-history__degree__text-container'>
					<div class='education-history__degree__type'>{type}:</div>
					<div class='education-history__degree__value'>
						{link && (
							<a
								id={linkId}
								href={link}
								target='_blank'
								class='education-history__degree__link'
							>{value}</a>
						)}
						{!link && (
							<>{value}</>
						)}
					</div>
				</div>
			</div>
		</div>
	</div>
</education-history>

<script>

	class EducationHistory extends HTMLElement {
		connectedCallback() {
			// Read the message from the data attribute.
			const collapseButtonId = this.dataset.collapsebuttonid as string;
			const collapseButtonElement = document.getElementById(collapseButtonId);
			const downChevronContainerId = this.dataset.downchevroncontainerid as string;
			const downChevronContainerElement = document.getElementById(downChevronContainerId);
			const contentContainerId = this.dataset.contentcontainerid as string;
			const contentContainerElement = document.getElementById(contentContainerId);
			const linkId: string | undefined = this.dataset.linkid;
			let linkElement: null | HTMLAnchorElement = null;
			if (linkId) {
				linkElement = document.getElementById(linkId) as HTMLAnchorElement;
			}

			// Handle collapse button being pressed
			if (
				collapseButtonElement &&
				downChevronContainerElement &&
				contentContainerElement
			) {
				const collapseButtonHandler = () => {
					downChevronContainerElement.classList.toggle(
						'education-history__down-chevron-container--rotate',
					);
					contentContainerElement.classList.toggle(
						'visually-hidden',
					);
				};

				collapseButtonElement.addEventListener(
					'click',
					collapseButtonHandler,
				);
			}

			if (linkElement) {
				const linkHandler = (event: any) => {
					// TODO: Add analytics
					console.log(
						'log analytics for education link:',
						linkElement.innerText,
					);
				};

				linkElement.addEventListener('click', linkHandler);
			}
		}
	}

	customElements.define('education-history', EducationHistory);

</script>

<style lang='scss'>

	.education-history {
		&__title-section {
			display: flex;
			justify-content: center;
			align-items: center;
		}

		&__title-container {
			align-items: center;
			border-bottom: solid 2px var(--gray-200);
			display: flex;
			justify-content: center;
			position: relative;
		}

		&__company-name {
			color: var(--gray-0);
		}
		
		&__down-chevron-container {
			align-items: center;
			display: flex;
			justify-content: center;
			position: absolute;
			right: -19px;
			transform: rotate(180deg);

			&--rotate {
				transform: rotate(0deg);
			}

			:global(svg) {
				:global(path) {
					fill: var(--gray-0);
				}
			}
		}

		&__timeframe {
			display: flex;
			justify-content: center;
			align-items: center;
			font-weight: 700;

			&__contents {
				display: flex;
				justify-content: center;
				align-items: center;
			}
		}

		&__degree {
			display: flex;
			flex-direction: column;
			margin-top: 10px;

			&__img-area {
				display: flex;
				justify-content: center;
			}

			&__text-container {
				display: flex;
				justify-content: center;
				margin-top: 10px;
			}

			&__type {
				margin-right: 10px;
			}

			&__value {
				font-weight: 700;
			}

			&__link {
				color: var(--blue-50);
				text-decoration: solid;

				&:hover,
				&:active {
					color: var(--blue-150);
				}
			}
		}
	}

	// Need global to override Button styling
	:global(.education-history__title-button) {
		align-items: center;
		display: flex;
		justify-content: center;
		padding: 10px;
	}

</style>
