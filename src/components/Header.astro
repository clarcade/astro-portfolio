---
import Button from './Button.astro';
import Icon from './Icon.astro';
import ThemeSwitcher from './ThemeSwitcher.astro';

interface Props {
	hideContactCta?: boolean;
}

const {
	hideContactCta = false,
} = Astro.props;
---

<div class='my-header'>
	<header class='header'>
		<Button
			id='mobile-menu-button'
			class='header__mobile-menu-button'
			type='icon'
		>
			<Icon icon='menu-hamburger' />
		</Button>

		<div class='header__center'>
			{!hideContactCta && (
				<Button
					id='contact-me'
					type='link--primary'
					link='/contact'
				>
					Contact me
				</Button>
			)}
		</div>

		<div class='header__right'>
			<ThemeSwitcher id='theme-switcher' />
		</div>
	</header>
</div>

<script>

	import {
		drawerAndStatusMap,
		setDrawerStatus,
	} from '../stores/drawer-store';

	// Get DOM Elements
	const mobileMenuButtonElement = document.getElementById('mobile-menu-button');
	const contactMeButtonLinkElement = document.getElementById('contact-me') as HTMLAnchorElement;

	if (mobileMenuButtonElement) {
		const toggleMobileNavSidebar = () => {
			const leftNavDrawerId = 'leftnav-drawer';
			const newStatus = drawerAndStatusMap.get()[leftNavDrawerId] === 'open'
				? 'close'
				: 'open';

			setDrawerStatus({
				drawerId: leftNavDrawerId,
				status: newStatus,
			});
		};

		// TODO: Add events for touch/keyboard events
		mobileMenuButtonElement.addEventListener('click', toggleMobileNavSidebar);
	}

	if (contactMeButtonLinkElement) {
		const contactMeButtonLinkHandler = (event: any) => {
			event.preventDefault();

			// TODO: Add analytics
			console.log('log analytics for contact cta');
			// Mock for doing actual analytics work
			setTimeout(() => {
				window.location.href = contactMeButtonLinkElement.href;
			}, 500);
		};

		// TODO: Add events for touch/keyboard events
		contactMeButtonLinkElement.addEventListener('click', contactMeButtonLinkHandler);
	}

</script>

<style lang='scss'>

	.my-header {
		display: flex;
		height: 64px;
		width: 100%;
	}

	.header {
		align-items: center;
		background-color: var(--gray-250);
		display: grid;
		grid-template-columns: auto 1fr auto;
		grid-template-rows: 1fr;
		height: 64px;
		padding: 0 20px;
		position: fixed;
		width: 100%;

		:global(.header__mobile-menu-button) {
			padding: 15px;
			cursor: pointer;

			:global(svg) {
				:global(path) {
					stroke: var(--gray-100);
				}
			}

			&:hover {
				:global(svg) {
					:global(path) {
						stroke: var(--gray-0);
					}
				}
			}
		}

		&__center {
			display: flex;
			justify-content: center;
			align-items: center;
		}
	}

</style>