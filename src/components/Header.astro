---
import Button from './Button.astro';
import Icon from './Icon.astro';
import ThemeSwitcher from './ThemeSwitcher.astro';

interface Props {
	sidenavId: string;
	hideContactCta?: boolean;
}

const {
	sidenavId,
	hideContactCta = false,
} = Astro.props;
---

<my-header data-sidenavid={sidenavId}>
	<header class='header'>
		<Button
			id='mobile-menu-button'
			class='header__mobile-menu-button'
			type='icon'
		>
			<Icon icon='menu-hamburger' />
		</Button>

		<div class='header__center'>
			{!hideContactCta && (
				<Button
					id='contact-me'
					type='link--primary'
					link='/contact'
				>
					Contact me
				</Button>
			)}
		</div>

		<div class='header__right'>
			<ThemeSwitcher id='theme-switcher' />
		</div>
	</header>
</my-header>

<script>

	class Header extends HTMLElement {
		connectedCallback() {
			// Read the message from the data attribute.
			const sidenavId = this.dataset.sidenavid as string;

			// Get DOM Elements
			const sidenavElement = document.getElementById(sidenavId);
			const mobileMenuButtonElement = document.getElementById('mobile-menu-button');
			const contactMeButtonLinkElement = document.getElementById('contact-me') as HTMLAnchorElement;

			if (mobileMenuButtonElement && sidenavElement) {
				const toggleMobileNavSidebar = () => {
					sidenavElement.classList.remove('visually-hidden');
					sidenavElement.classList.add('drawer-container--is-open');
				};

				// TODO: Add events for touch/keyboard events
				mobileMenuButtonElement.addEventListener('click', toggleMobileNavSidebar);
			}

			if (contactMeButtonLinkElement) {
				const contactMeButtonLinkHandler = (event: any) => {
					event.preventDefault();

					// TODO: Add analytics
					console.log('log analytics for contact cta');
					// Mock for doing actual analytics work
					setTimeout(() => {
						window.location.href = contactMeButtonLinkElement.href;
					}, 500);
				};

				// TODO: Add events for touch/keyboard events
				contactMeButtonLinkElement.addEventListener('click', contactMeButtonLinkHandler);
			}
		}
	}

	customElements.define('my-header', Header);

</script>

<style lang='scss'>

	@use '../styles/typography';
	@use '../styles/colors';

	.header {
		display: grid;
		grid-template-columns: auto 1fr auto;
		grid-template-rows: 1fr;
		align-items: center;
		height: 64px;
		width: 100%;
		background-color: var(--gray-250);
		padding: 0 20px;

		:global(.header__mobile-menu-button) {
			padding: 15px;

			:global(svg) {
				:global(path) {
					stroke: var(--gray-100);
				}
			}

			&:hover {
				:global(svg) {
					:global(path) {
						stroke: var(--gray-0);
					}
				}
			}
		}

		&__center {
			display: flex;
			justify-content: center;
			align-items: center;
		}
	}

</style>