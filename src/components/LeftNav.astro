---
import Drawer from './Drawer.astro';
import {type MainNavigationLinksMetadata} from '../types/MainNavigationLinkTypes';

interface Props {
	class?: string;
	linksMetadata: MainNavigationLinksMetadata;
}

const {linksMetadata} = Astro.props;
const {links, selectedLinkByPath} = linksMetadata;
---

<Drawer id='leftnav-drawer'>
	<nav class='left-nav' id='left-nav'>
		<ul class='left-nav__list'>
			{links.map((linkMetadata) => {
				let linkToRender;

				if (linkMetadata.link === selectedLinkByPath) {
					linkToRender = (
						<li class='left-nav__item'>
							<div class='left-nav__link left-nav__link--selected'>
								{linkMetadata.label}
							</div>
						</li>
					);
				} else {
					linkToRender = (
						<li class='left-nav__item'>
							<a
								class='left-nav__link'
								href={linkMetadata.link}
							>
								{linkMetadata.label}
							</a>
						</li>
					);
				}

				return linkToRender;
			})}
		</ul>
	</nav>
</Drawer>

<script>

	// Use event delegation pattern to handle link events
	const leftnavElement = document.getElementById('left-nav');

	if (leftnavElement) {
		const linksHandler = (event: any) => {
			event.preventDefault();

			const targetElement = event.target as HTMLElement;

			if (
				targetElement.tagName === 'A' &&
				targetElement.classList.contains('left-nav__link')
			) {
				console.log(
					'log analytics for left-nav link',
					(targetElement as HTMLAnchorElement).innerText,
				);

				// Mock for doing actual analytics work
				// setTimeout(() => {
				window.location.href = (targetElement as HTMLAnchorElement).href;
				// }, 500);
			}
		};

		leftnavElement.addEventListener('click', linksHandler);
	}

</script>

<style lang='scss'>

	@use '../styles/colors';

	.left-nav {
		display: flex;
		flex-direction: column;
		padding: 15px 10px 0;

		&__list {
			list-style: none;
		}

		&__item {
			margin-bottom: 10px;
			margin-left: 0;

			&:last-of-type {
				margin-bottom: 0;
			}
		}

		&__link {
			display: flex;
			align-items: center;
			border-radius: 10px;
			padding: 10px;
			cursor: pointer;
			color: var(--gray-0);

			&--selected,
			&:hover {
				background-color: var(--gray-250);
			}

			&:active {
				background-color: var(--gray-200);
			}

			&--selected {
				cursor: default;

				&:active {
					background-color: var(--gray-250);
				}
			}
		}
	}

</style>
